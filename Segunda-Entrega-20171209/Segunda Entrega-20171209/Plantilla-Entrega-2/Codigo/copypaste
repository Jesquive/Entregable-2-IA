
Itinerario Mutacion(Itinerario padre1, Itinerario padre2, int n)
{
  //std::cout << "MUTACION 1" << '\n';
  std::vector<int> nuevoVectorItinerario;
  std::vector<int> YaUsados;

  /*
  std::cout << "$$$$$$$$$$" << '\n';
  for (int i = 0; i < n; i++) {
    std::cout << padre1.A[i][0] << ' ';
  }
  std::cout << "\n$$$$$$$$$$" << '\n';
  std::cout << "$$$$$$$$$$" << '\n';
  for (int i = 0; i < n; i++) {
    std::cout << padre2.A[i][0] << ' ';
  }

  std::cout << "\n$$$$$$$$$$vectror si haay" << '\n';*/
  //Lista que sera usada para saber que numeros ya he usado para no repetir
  for (int i = 1; i < n+1; i++) {
    YaUsados.push_back(i);
  }
  /*
  for (int i = 0; i < n; i++) {
      std::cout << YaUsados[i];
  }

  std::cout << '\n';
  */
  //std::cout << "MUTACION 2" << '\n';

  //agregar genes de cada padre, sin repetir, hasta tener la cantidad necesarias
  int cantAgregados = 0;
  do {
    int cualPadre = rand()%2;
    if( cualPadre == 1)
    {
      int IndicedeFila= rand()%n;
      //std::cout << "IndicedeFila A: " << IndicedeFila << '\n';
      int GenActual = padre1.VectorGenerador[IndicedeFila];

      //std::cout << "GEN ACTUAL A:  "<< GenActual << '\n';

      //Si no esta usado, agregarlo
      if(YaUsados[GenActual] != -1)
      {
        YaUsados[GenActual] = -1;
        nuevoVectorItinerario.push_back(GenActual+1);
        cantAgregados +=1;
        //std::cout << "agregadoA : " << GenActual << '\n';
      }
    } else
    {
      int IndicedeFila= rand()%(n-1);
      int GenActual = padre2.VectorGenerador[IndicedeFila];



      //Si no esta usado, agregarlo
      if(YaUsados[GenActual] != -1)
      {
        YaUsados[GenActual] = -1;
        nuevoVectorItinerario.push_back(GenActual+1);
        cantAgregados +=1;
        //std::cout << "agregadoB : " << GenActual << '\n';
      }
    }
  } while(cantAgregados != n);

  for (int m = 0; m < n; m++) {
    nuevoVectorItinerario[m] = nuevoVectorItinerario[m]-1;
    //std::cout << nuevoVectorItinerario[m] << " ";
  }
  //std::cout << "END2" << '\n';

  //Crear hijo, calcular sus valores, retornan
  Itinerario hijo(nuevoVectorItinerario, n);
  //std::cout << "END2.5" << '\n';

  hijo.CalcularPenitencia_Costo(n);
  //std::cout << "END3" << '\n';

  return hijo;
}


void Itinerario::BusquedaLocal(void)
{
  //Se hara SA con 3 movimientos, teniendo mas probabilidad de elegir el mas simple per efectivo
  int temperatura = MAXTEMPERATURA;
  int choice = rand()%100;

  //Se crea la arreglo B, la cual se le haran los cambios de los movimientos
  // y el arreglo C que siempre tendra al mejor hasta entonces
  vector < vector <int>> B(cantEquipos , vector<int>(cantEquipos-1));
  vector < vector <int>> C(cantEquipos , vector<int>(cantEquipos-1));

  //std::cout << "+++CLON+++" << '\n';
  for (int i = 0; i < cantEquipos; i++) {
    for (int j = 0; j < (cantEquipos-1); j++) {
      B[i][j] = A[i][j];
      C[i][j] = A[i][j];
      //std::cout << B[i][j] << ' ';
    }
    //std::cout << '\n';
  }
  //std::cout << "++++++++++" << '\n';

  vector<int> datos; //(Costo , penalidad , value)
  vector<int> datosC;
  datosC.push_back(Costo);
  datosC.push_back(Penalidad);
  datosC.push_back(Value);

  //MOVIMIENTO SWAá¹”HOMES
  if(choice < MOV1SA)
  {
    //std::cout << "SWAPHOMES" << '\n';
    bool BreakingPoint = false;

    int VecesEstancados = 0;
    int VecesSinCambios = 0;
     while( VecesEstancados <= 3){

      for (int k = 0; k < cantEquipos; k++) {


        for (int l = 0; l < cantEquipos-1; l++) {
          int indice = B[k][l];
          int reset1 = indice;
          if(sgn(indice)==-1){
            indice = -(indice) -1 ;
          } else {
            indice -= 1;
          }
          int reset2 = B[indice][l];
          //Cambiar los signos de los 2
          //std::cout << "CAMBIO DE INDICES -- " <<-(indice) << " * " << -(B[indice][l]) << '\n';
          B[k][l] = -(B[k][l]);
          B[indice][l] = -(B[indice][l]);

          //Recalcular costo-penalidad-value
          //std::cout << "------------------------------------" << '\n';

          //std::cout << "CALCULAR NUEVOS COSTOS" << '\n';
          datos = CalcularPenCost(cantEquipos,B);
          //std::cout << "COSTO NUEVO -- " << datos[0] <<'\n';
          //std::cout << "PENALIDAD NUEVO -- " <<  datos[1]<<'\n';
          //std::cout << "VALUE NUEVO -- " <<  datos[2]<<'\n';
          //std::cout << "COSTO ANTIGUO -- " << datosC[0] <<'\n';
          //std::cout << "PENALIDAD ANTIGUO -- " <<  datosC[1]<<'\n';
          //std::cout << "VALUE ANTIGUO -- " <<  datosC[2]<<'\n';
          //std::cout << "------------------------------------" << '\n';


          //Comparar si mejoro
          if (datos[2] < datosC[2]) {
            //std::cout << "SE ENCONTRO UNO MEJOR" << '\n';
            for (int o = 0; o < 3; o++) {
              datosC[o] = datos[o];
              C[k][l] = B[k][l];
              C[indice][l] = B[indice][l];
            }
            BreakingPoint = true;
              break;
/*
            std::cout << "------------------------------------" << '\n';
            for (int q = 0; q < cantEquipos; q++) {
              for (int w = 0; w < cantEquipos-1; w++) {
                std::cout << C[q][w] << ' ';
              }
              std::cout << '\n';
            }
            std::cout << "----\n";
            for (int q = 0; q < cantEquipos; q++) {
              for (int w = 0; w < cantEquipos-1; w++) {
                std::cout << A[q][w] << ' ';
              }
              std::cout << '\n';
            }
            std::cout << "------------------------------------" << '\n'; */

          } else {
            B[k][l] = reset1;
            B[indice][l] = reset2 ;
            VecesSinCambios += 1;
            //std::cout << "VECES SIN CAMBIO " << VecesSinCambios<< '\n';
          }


          //si no mejora, resetear los valores cambiados e intentar con el proximo
        }




        //std::cout << "BREAKINGPOINT -- " << BreakingPoint << '\n';
        if (VecesSinCambios >= (cantEquipos)*(cantEquipos-1)) {
          VecesEstancados+=1;
        }
        if(BreakingPoint == true)
        {
          //std::cout << "TERMINAR CICLO" << '\n';
          break;
        }
      }

      //std::cout << "VECES SIN CAMBIO " << VecesSinCambios<< '\n';
      //std::cout << "VECES ESTANCADOS " << VecesEstancados<< '\n';


    }


    //std::cout << "------------------------------------" << '\n';
    //std::cout << "Costo fin " << datosC[0] <<'\n';
    //std::cout << "pen fin " << datosC[1] <<'\n';
    //std::cout << "value fin " << datosC[2] <<'\n';
    Costo = datosC[0];
    Penalidad =datosC[1];
    Value =datosC[2];

    for (int i = 0; i < cantEquipos; i++) {
      for (int j = 0; j < (cantEquipos-1); j++) {
        A[i][j] = C[i][j];
        //std::cout << B[i][j] << ' ';
      }
      //std::cout << '\n';
    }

  }
  else if(choice < MOV2SA) //MOVSWAP ROUND
  {
    std::cout << "MOVSWAP ROUND" << '\n';


  } else  //MOVSWAP TEAMS SCHEDULES
  {
    std::cout << "MOVSWAP TEAMS SCHEDULES" << '\n';

  }


}
